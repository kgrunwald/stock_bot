service: app
useDotenv: true

provider:
    name: aws
    region: us-west-2
    runtime: provided.al2
    apiGateway:
        shouldStartNameWithService: true
    environment:
        APP_ENV: prod

plugins:
    - ./vendor/bref/bref
    - serverless-plugin-scripts
    - serverless-s3-deploy

custom:
    scripts:
        hooks:
            'package:initialize': yarn build
    assets:
        auto: true
        verbose: true
        targets:
            - bucket: jk-stockbot-assets
              prefix: assets
              empty: true
              files:
                - source: public/build/
                  globs: 
                    - '**/*.css'
                    - '**/*.js'
                    - '**/*.map'
                    - '**/*.json'
    
resources:
    Resources:
        Assets:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: jk-stockbot-assets
                PublicAccessBlockConfiguration:
                    BlockPublicAcls : true
                    BlockPublicPolicy : true
                    IgnorePublicAcls : true
                    RestrictPublicBuckets : true
        AssetsPolicy:
            Type: AWS::S3::BucketPolicy
            Properties:
                Bucket: !Ref Assets
                PolicyDocument:
                    Statement:
                        -   Effect: Allow
                            Principal:
                                CanonicalUser: !GetAtt S3OAI.S3CanonicalUserId
                            Action: 's3:GetObject'
                            Resource: !Join ['/', [!GetAtt Assets.Arn, '*']]
        S3OAI:
            Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
            Properties:
                CloudFrontOriginAccessIdentityConfig:
                    Comment: 'CloudFront OAI for StockBot'
        WebsiteCDN:
            Type: AWS::CloudFront::Distribution
            Properties:
                DistributionConfig:
                    Enabled: true
                    PriceClass: PriceClass_100
                    HttpVersion: http2
                    Origins:
                        - Id: AssetsOrigin
                          DomainName: !GetAtt Assets.RegionalDomainName
                          S3OriginConfig:
                            OriginAccessIdentity: !Join [ "", [ "origin-access-identity/cloudfront/", !Ref S3OAI ] ]
                    DefaultCacheBehavior:
                        AllowedMethods: [GET, HEAD, OPTIONS]
                        TargetOriginId: AssetsOrigin
                        ForwardedValues:
                            QueryString: 'false'
                            Cookies:
                                Forward: none
                        ViewerProtocolPolicy: redirect-to-https
                        Compress: true
        SessionsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: jk-stockbot-sessions
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        Database:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: jk-stockbot
                AttributeDefinitions:
                    - AttributeName: PK
                      AttributeType: S
                    - AttributeName: SK
                      AttributeType: S
                    - AttributeName: GSI1
                      AttributeType: S
                    - AttributeName: GSI2
                      AttributeType: S
                KeySchema:
                    - AttributeName: PK
                      KeyType: HASH
                    - AttributeName: SK
                      KeyType: RANGE
                GlobalSecondaryIndexes:
                    - IndexName: GSI1
                      KeySchema:
                        - AttributeName: GSI1
                          KeyType: HASH
                        - AttributeName: PK
                          KeyType: RANGE
                      Projection:
                        ProjectionType: ALL
                      ProvisionedThroughput: 
                        ReadCapacityUnits: 1
                        WriteCapacityUnits: 1
                    - IndexName: GSI2
                      KeySchema:
                        - AttributeName: GSI2
                          KeyType: HASH
                        - AttributeName: PK
                          KeyType: RANGE
                      Projection:
                        ProjectionType: ALL
                      ProvisionedThroughput:
                        ReadCapacityUnits: 1
                        WriteCapacityUnits: 1
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
        StockBotLambdaRole:
            Type: AWS::IAM::Role
            Properties:
                AssumeRolePolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                        - lambda.amazonaws.com
                      Action:
                      - sts:AssumeRole
                Path: "/"
                Policies:
                - PolicyName: root
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                    - Effect: Allow
                      Action:
                      - logs:*
                      Resource: arn:aws:logs:*:*:*
                    - Effect: Allow
                      Action:
                      - dynamodb:BatchGetItem
                      - dynamodb:BatchWriteItem
                      - dynamodb:ConditionCheckItem
                      - dynamodb:DeleteItem
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:Query
                      - dynamodb:UpdateItem
                      - dynamodb:UpdateTimeToLive
                      Resource: 
                      - !Join ["", [!GetAtt Database.Arn, '*'] ]
                      - !GetAtt SessionsTable.Arn
                    - Effect: Allow
                      Action:
                      - ssm:PutParameter
                      - ssm:GetParameter
                      Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/jk-stockbot*'

functions:
    api:
        handler: 'public/index.php'
        role: StockBotLambdaRole
        description: ''
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        layers:
            - ${bref:layer.php-74-fpm}
        events:
            - httpApi: '*'
    console:
        handler: bin/console
        role: StockBotLambdaRole
        timeout: 120 # in seconds
        layers:
            - ${bref:layer.php-74} # PHP
            - ${bref:layer.console} # The "console" layer

# Exclude files from deployment
package:
    exclude:
        - .env.*
        - 'node_modules/**'
        - 'tests/**'
        - 'assets/**'
        - 'var/**'
        - 'public/build/**/*.js'
        - 'public/build/**/*.css'
        - 'package.json'
